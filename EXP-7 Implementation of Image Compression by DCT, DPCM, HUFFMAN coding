Implementation of Image Compression by DCT, DPCM, HUFFMAN coding

I = imread("C:\\Users\\parin\\Desktop\\butterfly.png", "png");
g = rgb2gray(I);
blockSize = 8;
dctCoefficients = blockproc(g, [blockSize blockSize], @(block) dct2(block.data));
quantizationFactor = 4; 
quantizedDCT = round(dctCoefficients / quantizationFactor);
symbols = unique(quantizedDCT(:));
[~, ~, idx] = unique(quantizedDCT(:));
probabilities = histcounts(idx, length(symbols), 'Normalization', 'probability');
huffmanDictionary = huffmandict(symbols, probabilities);
dctHuffmanCodes = huffmanenco(quantizedDCT(:), huffmanDictionary);
decodedQuantizedDCT = huffmandeco(dctHuffmanCodes, huffmanDictionary);
decodedQuantizedDCT = reshape(decodedQuantizedDCT, size(quantizedDCT));
reconstructedImage = blockproc(decodedQuantizedDCT, [blockSize blockSize], @(block) idct2(block.data));
re2 = reconstructedImage * quantizationFactor;
g_double = double(g);
diff_encoded = diff(g_double, 1, 2);
dpcm_decoded = [g_double(:,1), diff_encoded + g_double(:,1:end-1)];
figure;
subplot(3,1,1);
imshow(g);
title('Original Image');
subplot(3,1,2);
imshow(uint8(reconstructedImage));
title('Reconstructed Image from DCT + Huffman');
subplot(3,1,3);
imshow(uint8(dpcm_decoded));
title('Reconstructed Image from DPCM');
sgtitle("Parina")
